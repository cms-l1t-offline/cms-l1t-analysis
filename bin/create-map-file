#!/usr/bin/env python
from __future__ import print_function
import os
import click
import click_log
import logging

import ROOT
from rootpy.io import root_open
from rootpy.tree import Tree
from cmsl1t.utils.module import load_L1TNTupleLibrary
from cmsl1t.io.mapfile import \
    default_alias, full_path_alias, shorthand_alias
import cmsl1t

import yaml
import collections

logger = logging.getLogger(__name__)
logging.getLogger("rootpy.tree.chain").setLevel(logging.WARNING)
click_log.basic_config(logger)

ALIAS_REGISTRY = []


def extract_branches(tree):
    paths = []
    for branch in tree.branches:
        branchName = branch.GetName()

        if isinstance(branch, ROOT.TBranchElement):
            leaves = ['.'.join([branchName, l.GetName()])
                      for l in branch.GetListOfBranches()]
            if leaves:
                paths += leaves
            else:
                paths.append(branchName)
        elif isinstance(branch, ROOT.TBranch):  # plain branches
            paths.append(branchName)

    return sorted(paths, key=lambda s: s.lower())


def extract_trees(input_file):
    trees = {}

    with root_open(input_file) as f:
        for path, dirs, objects in f.walk():
            for objName in objects:
                objPath = os.path.join(path, objName)
                obj = f.Get(objPath)
                if isinstance(obj, Tree):
                    trees[objPath] = dict(
                        name=objName,
                        branches=extract_branches(obj),
                    )
        return trees


def convert_to_dict(trees):
    trees_dict = {}
    for path, tree in trees.items():
        trees_dict[path] = dict(
            name=tree['name'],
            branches={b: {} for b in tree['branches']},
        )
    return trees_dict


def getDefaultAliases(path, treeName, objName):
    return [
        # full_path_alias(path, objName),
        # default_alias(path, treeName, objName),
        shorthand_alias(path, treeName, objName),
    ]


def add_aliases(trees):
    global ALIAS_REGISTRY
    for path, tree in trees.items():
        branches = tree['branches']
        for name, value in branches.items():
            defaultAliases = getDefaultAliases(path, tree['name'], name)
            ALIAS_REGISTRY += defaultAliases
            value['aliases'] = defaultAliases
    return trees


def add_meta_data(trees):
    for path, tree in trees.items():
        optional = False
        if 'reco' in path.lower():
            optional = True
        tree['optional'] = optional
    return trees


def create_order(trees):
    new_trees = {}
    for path, tree in trees.items():
        new_trees[path] = collections.OrderedDict([
            ('name', tree['name']),
            ('optional', tree['optional']),
            ('branches', tree['branches']),
        ])
    return new_trees


def encapsulate_trees(trees):
    return collections.OrderedDict([
        ('version', cmsl1t.__version__),
        ('content', trees),
    ]
    )


def _represent_dict_order(self, data):
    return self.represent_mapping('tag:yaml.org,2002:map', data.items())


def setup_yaml():
    """ https://stackoverflow.com/a/8661021 """
    yaml.add_representer(collections.OrderedDict, _represent_dict_order)


def print_yaml(trees, toFile=None):
    setup_yaml()
    if toFile:
        with open(toFile, 'w') as f:
            yaml.dump(
                trees,
                f,
                default_flow_style=False,
            )
    else:
        print(yaml.dump(trees, default_flow_style=False))


def check_for_duplicates():
    global ALIAS_REGISTRY
    unique_aliases = set(ALIAS_REGISTRY)
    noClashes = len(ALIAS_REGISTRY) == len(unique_aliases)
    if noClashes:
        print('All aliases are unique')
        return True
    else:
        print('Found duplicate aliases')
        counter = collections.Counter(ALIAS_REGISTRY)
        duplicates = [item for item, count in counter.items() if count > 1]
        print('Found', len(duplicates), 'duplicates:')
        for d in duplicates:
            print('-->', d)
        return False


@click.command()
@click.argument('input_file', type=click.Path(exists=True))
@click.option('-o', '--output_file', default='config/ntuple_content.yaml')
@click_log.simple_verbosity_option(logger)
def main(input_file, output_file):
    '''
    '''
    load_L1TNTupleLibrary()
    # ntuple content to dictionary
    trees = extract_trees(input_file)
    trees = convert_to_dict(trees)
    # add custom information
    trees = add_aliases(trees)
    trees = add_meta_data(trees)
    # make pretty and convert to YAML
    trees = create_order(trees)
    trees = encapsulate_trees(trees)

    if check_for_duplicates():
        print_yaml(trees, output_file)


if __name__ == '__main__':
    main()
